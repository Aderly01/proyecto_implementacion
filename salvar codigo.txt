if($request->isJson()){
            //creamos una variable para ingresar el tiempo actual
            $now = new \DateTime();
            //optenemos la peticion en json
            $data = $request->json()->all();

            //consultamos a la tabla billeteras_ clientes para ver si el id cliente e id billetera ingresados estnan asociados en una misma billetera
            $peticion=DB::table('billeteras_clientes')->select('id_billetera','id_cliente')
                ->where('id_billetera',"=",$data['ID_BILLETERA'])->first();
            if($data['ID_BILLETERA']==$peticion->id_billetera && $data['ID_CLIENTE']==$peticion->id_cliente){

                //consultamos a la tabla billeteras para obtener la asignacion de la billetera
                $billetera=DB::table('billeteras')->select('billetera_asignada')
                    ->where('id_billetera','=',$data['ID_BILLETERA'])->first();

                //consultamos en la tabla clientes para ver el estado del cliente
                $cliente = DB::table('clientes')->select('estado_cliente')
                    ->where('id_cliente','=',$data['ID_CLIENTE'])->first();

                //consultamos en la tabla clientes para ver el estado del cliente
                $saldo= DB::table('saldo_billetera')->select('saldo_billetera')
                    ->where('id_billetera','=',$data['ID_BILLETERA'])->first();

                //inserta en la tabla transacciones segun el estado de la billetera con los datos de las consulta select anterior
                if($billetera->billetera_asignada == 'N'){
                    $res = Transaccion::create([
                        'fecha_transaccion'=>$now->format('Y-m-d H:i:s'),
                        'id_billetera'=>$data['ID_BILLETERA'],
                        'tipo_transaccion'=>'PF',
                        'id_servicio'=>1,
                        'estado_transaccion'=>'F',
                        'id_error'=>410,
                        'usu_cre'=>'@aderly',
                        'fec_cre'=>'2020-03-17 11:22:30'
                    ]);
                    return response()->json(['Mensaje'=>'Fallida, billetera no activa error: 410','Transaccion'=>$res]);
                }
                //inserta en la tabla transacciones segun el estado del cliente con los datos de las consulta select anterior
                if($cliente->estado_cliente == 'I') {
                    $res = Transaccion::create([
                        'fecha_transaccion' => $now->format('Y-m-d H:i:s'),
                        'id_billetera' => $data['ID_BILLETERA'],
                        'tipo_transaccion' => 'PF',
                        'id_servicio' => 1,
                        'estado_transaccion' => 'F',
                        'id_error' => 411,
                        'usu_cre' => '@aderly',
                        'fec_cre' => '2020-03-17 11:22:30'
                    ]);
                    return response()->json(['Mensaje' => 'Fallida, cliente inactivo error: 411','Transaccion'=>$res]);
                }
                //inserta en la tabla transacciones segun el saldo de la billetera con los datos de las consulta select anterior
                if($saldo->saldo_billetera < $data['MONTO_A_PAGAR']) {
                    $res = Transaccion::create([
                        'fecha_transaccion' => $now->format('Y-m-d H:i:s'),
                        'id_billetera' => $data['ID_BILLETERA'],
                        'tipo_transaccion' => 'PF',
                        'id_servicio' => 1,
                        'estado_transaccion' => 'F',
                        'id_error' => 412,
                        'usu_cre' => '@aderly',
                        'fec_cre' => '2020-03-17 11:22:30'
                    ]);
                    return response()->json(['Mensaje' => 'Fallida, saldo insuficiente error: 412','Transaccion'=>$res]);
                }else{
                    //inserta en la tabla transacciones segun el estado de la billetera con los datos de las consulta select anterior
                    $res = Transaccion::create([
                        'fecha_transaccion'=>$now->format('Y-m-d H:i:s'),
                        'id_billetera'=>$data['ID_BILLETERA'],
                        'tipo_transaccion'=>'PF',
                        'id_servicio'=>1,
                        'estado_transaccion'=>'E',
                        'usu_cre'=>'@aderly',
                        'fec_cre'=>'2020-03-17 11:22:30'
                    ]);
                }

                if($billetera->billetera_asignada=='S' && $cliente->estado_cliente == 'A' && $saldo->saldo_billetera >= $data['MONTO_A_PAGAR']){
                    //TRAEMOS EL ULTIMO ID INGRESADO EN LA TABLA TRANSACCIONES
                    $ide=DB::table('transacciones')->select('id_transaccion','tipo_transaccion','fecha_transaccion')->orderBy('id_transaccion', 'desc')->first();
                    //INSERTA LA TABLA MOVIMIENTOS
                    $res2=Movimiento::create([
                        'fecha_movimiento'=>$now->format('Y-m-d H:i:s'),
                        'id_transaccion' => $ide->id_transaccion,
                        'monto_transaccion'=>$data['MONTO_A_PAGAR'],
                        'saldo_anterior'=>$saldo->saldo_billetera,
                        'saldo_posterior'=>$saldo->saldo_billetera - $data['MONTO_A_PAGAR'],
                        'usu_cre'=>'@aderly',
                        'fec_cre'=>$now->format('Y-m-d H:i:s')
                    ]);
                    //ACTUALIZA LA TABLA SALDOS
                    $res3 =Saldo::where('id_billetera', $data['ID_BILLETERA'])
                        ->update([
                            'saldo_billetera' => $saldo->saldo_billetera - $data['MONTO_A_PAGAR'],
                            'usu_mod'=>'@aderly',
                            'fec_mod'=>$now->format('Y-m-d H:i:s')
                        ]);

                    return response()->json(['Transaccion'=>'Correcta',
                        'id transaccion'=>$ide->id_transaccion,'tipo'=>$ide->tipo_transaccion,
                        'fecha'=>$ide->fecha_transaccion,'monto'=>$res2->monto_transaccion], 201);
                }
            }else{
                $res = Transaccion::create([
                    'fecha_transaccion' => $now->format('Y-m-d H:i:s'),
                    'id_billetera' => $data['ID_BILLETERA'],
                    'tipo_transaccion' => 'PF',
                    'id_servicio' => 1,
                    'estado_transaccion' => 'F',
                    'id_error' => 413,
                    'usu_cre' => '@aderly',
                    'fec_cre' => '2020-03-17 11:22:30'
                ]);
                return response()->json(['Peticion denegada' => 'Fallida, Billetera o cliente no existe error: 413','Transaccion'=>$res], 401);

            }

        }
        //SI LA REQUEST NO ES JSON MOSTRARA UN JSON CON UN ERROR 401 UNAUTHORIZED
        return response()->json(['Error'=>'No Json'],401);